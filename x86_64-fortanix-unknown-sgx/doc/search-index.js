var searchIndex = JSON.parse('{\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","t":[17,17,11,11,6,6,6,6,6,6,6,6,6,6,6,6,6,4,11,11,6,6,6,6,6,11,6,6,6,6,11,11,11,6,6,6,6,6,6],"n":["INT_MAX","INT_MIN","borrow","borrow_mut","c_char","c_double","c_float","c_int","c_long","c_longlong","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","fmt","from","int16_t","int32_t","int64_t","int8_t","intmax_t","into","intptr_t","ptrdiff_t","size_t","ssize_t","try_from","try_into","type_id","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t"],"q":["libc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","Equivalent to C’s <code>void</code> type when used as a pointer.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0],"f":[0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[4,[3]]]],[[]],0,0,0,0,0,[[]],0,0,0,0,[[],4],[[],4],[[],5],0,0,0,0,0,0],"p":[[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
